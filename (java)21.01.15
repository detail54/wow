//예외처리.  오류 발생시 java가 직접 처리하는걸 막고 개발자가 오류를 처리할 코드를 작성.

	try{
		(오류발생코드)
	}catch(a){
		(오류 발생시 처리할 코드)				a는 변수명
	}

Exception.

ex)

	int aa[] = new int[3];

	try{
		aa[3] = 100;
	}catch(ArrayIndexOutOfBoundsException e){
		System.out.println("배열 첨자가 배열 크기보다 커요~");
	}

== 배열 첨자가 배열 크기보다 커요~

ex2)
	int aa[] = new int[3];

	try{
		aa[2] = 100/0;											//코드 실행시 aa[2] = 100/0; 여기에서 오류가 발생. 0으로 나누기때문.
		aa[3] = 100;											//catch는 여러가지 작성가는한데 오류 발생하면 해당 오류 내용으로 이어져서 여기에선 2번째 catch문 ArithmeticException e 로 가서 0으로~~ 출력.
	}catch(ArrayIndexOutOfBoundsException e){					//출력 되고 그 다음 오류인 aa[3] = 100; 으로 다시 가서 그 오류를 추가로 실행시키는게 아니라 처음 오류 출력하고 중단.
		System.out.println("배열 첨자가 배열 크기보다 커요~");
	}catch(ArithmeticException e){
		System.out.println("0으로 나누는 등의 오류에요~");
	}finally {													//finally 는 오류가 있어도 무조건 실행된다.
		System.out.println("이 부분은 무조건 나와요~";
	}
	
	== 0으로~~
	   이 부분은~~
	   
ex3)
	int a = 100, b=0;
	int result;
	try {
		if(b ==0) 
			throw new Exception("0으로 나누려고요? 안됩니다");			//throw new Exception(); 은 에러 메세지를 지정된 메세지가 아닌 새로운 메세지로 임의 변경
			result = a / b;										//여기에서 오류 발생. 원래는 0으로 나누는거기때문에 ArithmeticException 오류메세지인 "/ by zero" 가 출력되야하지만
	} catch(Exception e){										//throw new Exception(); 으로 새로 지정한 메세지가 출력된다.		
			System.out.println("발생오류 ==>");
			System.out.println(e.getMessage());					//e.getMessage() 는 오류 발생시 실행할 catch의 객체 Exception e 의 오류 메세지 출력 메소드.
	}

	== 발생오류 ==> 0으로 나누려고요? 안됩니다
	

ex4)
		Scanner sc = new Scanner(System.in);
			
		try {
			System.out.println("첫번째 수 입력");
			int a = sc.nextInt();							//첫번째 정수와 연산자, 두번째정수 입력받아 두 정수중 하나라도 0이면 오류 메세지 변경하여 오류내용 출력.
			
			System.out.println("연산자 입력");
			char b = sc.next().charAt(0);
			
			System.out.println("두번째 수 입력");
			int c = sc.nextInt();
			
			switch(b) {
			case'*' :
				if(a==0 || c==0) {
					throw new Exception("0으로 곱하면 어짜피 0입니다.");
				}
				System.out.println(a*c);
				break;
			case '/' :
				if(a==0 || c==0) {
					throw new Exception("0으로 나누면 안됌.");
				}
				System.out.println(a*c);
				break;
			}
		} catch(Exception e) {
			System.out.println(e.getMessage());
		}
		
		
		
// 버블정렬
		int a[] = {3,2,1,6,5};
		int temp;
		
		for(int i =0; i<4; i++) {					//i = 3, j =2,   i=2, j=1,   i=1,j=6 ,  i=6 j=5 이렇게 비교할거라 i값 4까지만줌.
			for(int j =i+1; j<5; j++) {				//a의 i자리수와 그 다음자리수를 비교해야되기때문에 j=i+1로 설정.
				if(a[i]>a[j]) {
					temp = a[i];	//a[i]값을 다른 변수 temp에 임시저장
					a[i] = a[j];	//a[j]를 a[i]에 저장. 
					a[j] = temp;	//a[i]값을 저장해놓은 temp값을 a[j]에 저장..   		두 자리 값 교환 하는 코드
				}
			}
		}
	
	
// 파일 입출력

	스트림 : 데이터를 송수신 하기위한 통로.. 입력 or 출력 한쪽방향으로만 진행.
	
	바이트스트림 - 1. 입력 스트림 = ~~INputStream으로 끝남
				2. 출력 스트림 = ~~OutputStream으로 끝남
				
	문자 스트림 - 1. 입력 스트림 = ~~Reader
				2. 출력 스트림 = ~~Writer
				
** 클래스는 부모 클래스 없이 자식클래스 단독으로 파일을 생성할 수 없음.

	1. 클래스가 부모클래스인지 자식 클래스인지 구분하는게 중요.
	구분은 Constructors의 매개변수를 보고 매개변수안에 InputStream, OutputStream, Reader, Writer가 보이면 자식클래스, 없으면 부모 클래스.
	
	2. 파일에다 값 저장
	write 메소드 (값을 저장한다는 뜻)
	
	3. 파일 읽어들임
	Reader 메소드 (불러오는 작업)
	
	4. 파일 닫기
	close() 메소드 
	
//파일 읽어오는거	
	
		public static void main(String[] args) throws IOException   {

		char [] ary = new char[10];					//10바이트 생성. char =1 인데 배열에 10자리. 1*10
		
		int cnt;			//a에 아래 입력한 함수에 S, W 작성되어있음.	//텍스트 파일 내용을 글자하나하나 글자 수 만큼 반복해서 불러오려고 int 선언 
		
		FileReader in = new FileReader("a.txt");	//파일 읽어옴
		
		cnt=in.read(ary,0,ary.length);				//배열 ary 를 0번째부터 ary.length 인 9번째 자리까지 read., 불러와서 총 글자수를 cnt에 대입.
		
		for(int i=0; i<cnt; i++) {					//반복문 실행하여 ary[i], 즉 i<cnt 까지 반복하므로 10번 반복하여 ary[10], 9번째 자리까지 텍스트 파일 내 글자 수를 하나씩하나씩 반복하여 출력.
			System.out.println(ary[i]);
		}
		in.close();
		
	}

//파일 생성, 내용입력

		public static void main(String[] args) throws IOException {

		char a = 'S';
		char b = 'W';
		
		FileWriter out = new FileWriter("a.txt");	//파일 생성
		
		out.write(a);		//a 와 b를 텍스트 파일에 입력.
		out.write(b);
		
		out.close();
		
		
	}
	

	
	